---
- name: Create Certificates
  hosts: servers
  serial: 1

#  vars:
#    secret_ca_passphrase: "Th3!PassW0rD"                               # (optional) - default is Th3!PassW0rD
#    ca_path: "/certificates"                                           # (optional) - default is /certificates
#    ca_certname: "ca-certificate"                                      # (optional) - default is ca-certificate
#    common_name: "{{ subject_alt_name[0] | split(':') | last }}"       # (optional) - default is "{{ subject_alt_name[0] | split(':') | last }}"
#                                                                         (eg. test.techtalks.local)
#    country_name: "CZ"                                                 # (optional) - default is "CZ"
#    state_or_province_name: "Brno"                                     # (optional) - default is "Brno"
#    locality_name: "Brno"                                              # (optional) - default is "Brno"
#    organization_name: "Red Hat"                                       # (optional) - default is "Red Hat"
#    organizational_unit_name: "Ansible"                                # (optional) - default is "Ansible"
#    cert_path: "/etc/ssl/"                                             # (optional) - default is /etc/ssl
#    cert_name: "{{ ansible.hostname }}"                                # (optional) - default is {{ ansible.hostname }}
#    subject_alt_name:                                                 Â # (optional) - default is {{ ansible.fqdn }} + {{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}
#      - "DNS:test.techtalks.local"                                     # do not use space between DNS: and <name>
#      - "DNS:test2.techtalks.local"
#      - "IP:192.168.100.70"             # you can use also IP

  handlers:
    - name: Update CA trust
      ansible.builtin.command: /usr/bin/update-ca-trust
      register: ca_update
      changed_when: ca_update.rc == 0

  tasks:
    - name: Set SAN if it's not defined
      ansible.builtin.set_fact:
        subject_alt_name:
          - "DNS:{{ ansible_fqdn }}"
          - "IP:{{ ansible_default_ipv4.address | default(ansible_all_ipv4_addresses[0]) }}"
      when: subject_alt_name is not defined

    - name: Make sure needed packages are installed
      ansible.builtin.dnf:
        name: python3-cryptography
        state: present

    - name: Create private key for new certificate
      community.crypto.openssl_privatekey:
        path: "{{ cert_pathca_path | default('/etc/ssl') }}/{{ cert_name | default(ansible_hostname) }}.key"

    - name: Create certificate signing request (CSR) for new certificate
      community.crypto.openssl_csr_pipe:
        privatekey_path: "{{ cert_pathca_path | default('/etc/ssl') }}/{{ cert_name | default(ansible_hostname) }}.key"
        common_name: "{{ common_name | default(subject_alt_name[0] | split(':') | last) }}"
        country_name: "{{ country_name | default('CZ') }}"
        state_or_province_name: "{{ state_or_province_name | default('Brno') }}"
        locality_name: "{{ locality_name | default('Brno') }}"
        organization_name: "{{ organization_name | default('Red Hat') }}"
        organizational_unit_name: "{{ organizational_unit_name | default('Ansible') }}"
        subject_alt_name: "{{ subject_alt_name }}"
      register: csr

    - name: Check whether certificate exists
      ansible.builtin.stat:
        path: "{{ cert_pathca_path | default('/etc/ssl') }}/{{ cert_name | default(ansible_hostname) }}.pem"
      register: certificate_exists

    - name: Read existing certificate if exists
      ansible.builtin.slurp:
        src: "{{ cert_pathca_path | default('/etc/ssl') }}/{{ cert_name | default(ansible_hostname) }}.pem"
      when: certificate_exists.stat.exists
      register: certificate

    - name: Sign certificate with our CA
      community.crypto.x509_certificate_pipe:
        content: "{{ (certificate.content | b64decode) if certificate_exists.stat.exists else omit }}"
        csr_content: "{{ csr.csr }}"
        provider: ownca
        ownca_path: "{{ ca_path | default('/certificates') }}/{{ ca_certname | default('ca-certificate') }}.pem"
        ownca_privatekey_path: "{{ ca_path | default('/certificates') }}/{{ ca_certname | default('ca-certificate') }}.key"
        ownca_privatekey_passphrase: "{{ secret_ca_passphrase | default('Th3!PassW0rD') }}"
        ownca_not_after: +365d  # valid for one year
        ownca_not_before: "-1d"  # valid since yesterday
      delegate_to: "{{ groups['ca'][0] }}"
      run_once: true
      register: certificate

    - name: Write certificate file on destination server
      ansible.builtin.copy:
        dest: "{{ cert_pathca_path | default('/etc/ssl') }}/{{ cert_name | default(ansible_hostname) }}.pem"
        content: "{{ certificate.certificate }}"
        mode: "640"
        owner: root
        group: root
      when: certificate is changed

    - name: Fetch CA
      ansible.builtin.fetch:
        src: "{{ ca_path | default('/certificates') }}/{{ ca_certname | default('ca-certificate') }}.pem"
        dest: "/tmp/{{ ca_certname | default('ca-certificate') }}.pem"
        flat: true
      delegate_to: "{{ groups['ca'][0] }}"

    - name: Copy CA to server
      ansible.builtin.copy:
        src: "/tmp/{{ ca_certname | default('ca-certificate') }}.pem"
        dest: "/etc/pki/ca-trust/source/anchors/{{ ca_certname | default('ca-certificate') }}.pem"
        mode: "640"
        owner: root
        group: root
      notify:
        - Update CA trust
